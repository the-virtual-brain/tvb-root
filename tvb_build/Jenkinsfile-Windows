pipeline {
    agent {
        label 'WindowsDocker'
    }

    environment {
        FULL_DOCKER_IMAGE_NAME = 'docker-repository.codemart.ro/tvb-build-windows:docker'
    }

    stages {
        stage('Build docker image'){
            steps {
                script{
                    def dockerImage = docker.build("${FULL_DOCKER_IMAGE_NAME}", "-f tvb_build/docker/Dockerfile-win tvb_build/docker")
                    dockerImage.push()
                }
            }
        }
        stage('Copy Step 1') {
             steps {
                 bat '''
                       cd tvb_build
                       if exist build del build
                       cd ..
                 '''
                 step ([$class: 'CopyArtifact',
                     projectName: 'TVB - Step1',
                     selector: lastSuccessful(),
                     filter: 'tvb_build/build/TVB_build_step1.zip']);
                 bat '''
                       cd tvb_build
                       dir build
                 '''
                 stash includes: 'tvb_build/build/TVB_build_step1.zip', name: 'step1'
             }
        }
        stage ('Build TVB Distribution') {
            steps {
                withDockerContainer(image: "${FULL_DOCKER_IMAGE_NAME}", args: "--memory 2G") {
                    powershell 'cd tvb_build; cmd /c if exist build rd /s /q build; cd ..'
                    unstash 'step1'
                    powershell 'cd tvb_build; cmd /k "activate tvb-run & install_full_tvb.bat & python build_from_conda.py"'
                }
                archiveArtifacts artifacts: 'tvb_build/build/TVB_Windows*.zip'
            }
        }
        stage ('Tests on SqLite') {
            steps {
                withDockerContainer(image: "${FULL_DOCKER_IMAGE_NAME}", args: "--memory 3G") {
                    powershell 'cd tvb_build; cmd /k "activate tvb-run & install_full_tvb.bat & cd ../tvb_bin & run_tests.bat"; exit 0'
                }
                junit 'tvb_bin/TEST_OUTPUT/results_*.xml'
            }
        }
    }
    post {
        changed {
            mail to: 'paula.prodan@codemart.ro lia.domide@codemart.ro',
            subject: "Jenkins Pipeline ${currentBuild.fullDisplayName} changed status",
            body: """
                Result: ${currentBuild.result}
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'
                Check console output at ${env.BUILD_URL}"""
        }
    }
}
