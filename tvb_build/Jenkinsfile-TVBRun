pipeline {
    agent any

    environment {
        FULL_DOCKER_IMAGE_NAME = 'thevirtualbrain/tvb-run'
    }

    stages {
        stage('Copy Step 1') {
             steps {
                 sh '''#!/bin/bash
                       rm -R -f tvb_build/build
                 '''
                 step ([$class: 'CopyArtifact',
                     projectName: 'TVB - Step1',
                     selector: lastSuccessful(),
                     filter: 'tvb_build/build/TVB_build_step1.zip']);
                 sh '''#!/bin/bash
                       ls -all tvb_build/build
                 '''
                 stash includes: 'tvb_build/build/TVB_build_step1.zip', name: 'step1'
             }
        }

        stage ('Build tvb-run docker image') {
            steps {
                unstash 'step1'
                unzip zipFile: 'tvb_build/build/TVB_build_step1.zip', dir: 'tvb_build/docker/step1'
                script {
                    VERSION_TAG = sh(script: "curl -s 'https://raw.githubusercontent.com/the-virtual-brain/tvb-root/master/framework_tvb/setup.py' | grep VERSION | head -1 | tr -d 'VERSION = \"'", returnStdout: true). trim()
                    LAST_SHA = sh (script: "curl -s 'https://api.github.com/repos/the-virtual-brain/tvb-root/commits' | grep sha | head -1 | tr '\"' '_'", returnStdout: true).trim()
                    withDockerRegistry(credentialsId: 'tvb_on_docker_hub') {
                        def dockerContext = "tvb_build/docker"
                        def dockerFile = "${dockerContext}/Dockerfile-run"
                        def dockerImage = docker.build("${FULL_DOCKER_IMAGE_NAME}:'${VERSION_TAG}'", "--build-arg LAST_SHA='${LAST_SHA}' -f ${dockerFile} ${dockerContext}")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    post {
        changed {
            mail to: 'paula.popa@codemart.ro bogdan.valean@codemart.ro lia.domide@codemart.ro',
            subject: "Jenkins Pipeline ${currentBuild.fullDisplayName} changed status",
            body: """
                Result: ${currentBuild.result}
                Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'
                Check console output at ${env.BUILD_URL}"""
        }
    }
}